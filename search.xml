<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[cocoaPods指南]]></title>
    <url>%2FcocoaPods%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[1、更改软件源 sudo gem update --system 如果提示没权限: Operation not permitted - /usr/bin/update_rubygems使用 sudo gem update -n /usr/local/bin --system gem sources --remove https://rubygems.org/ gem sources -a https://ruby.taobao.org/ gem sources -l 123注：由于淘宝源不再更新，建议替换成Ruby China源：gem sources --remove https://ruby.taobao.org/gem sources -a https://gems.ruby-china.org/ 2、安装CocoaPodssudo gem install cocoapods 如果提示无权限，使用：sudo gem install -n /usr/local/bin cocoapods 3、pod初始化 普通⽅方式:(速度慢) pod setup 更改CocoaPods镜像索引(速度快⼀一点) 12pod repo remove masterpod repo add master http://git.oschina.net/akuandev/Specs.git pod repo update 4、使⽤用CocoaPods 在程序的跟路径新建⽂文件 Podfile 编辑 Podfile,添加此项目需要的开源类库 在终端cd到程序跟路径,执行 pod install 安装开源类库 123注意,需要记住如下 2 点即可:使用 CocoaPods ⽣成的 .xcworkspace ⽂件来打开工程,⽽不是以前的 .xcodeproj 文件 每次更改了 Podfile文件,你需要重新执行一次 pod update (--verbose --no-repo-update) 命令 5、查找第三⽅方类库pod search AFNetworking 6、关于 Podfile.lock​ 当你执行 pod install 之后,除了 Podfile 外, CocoaPods 还会⽣成一个名为 Podfile.lock 的文件,Podfile.lock 应该加⼊到版本控制里面,不应该把这个文件加⼊到 .gitignore 中,这样多人协作的时候,可以防止第三⽅库升级时造成大家各自的第三⽅库版本不一致 7、pod install 和 pod update 的区别这是英文原文链接 这是翻译版本]]></content>
      <categories>
        <category>cocoaPods</category>
      </categories>
      <tags>
        <tag>cocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pod install & pod update]]></title>
    <url>%2Fpod-install-pod-update%2F</url>
    <content type="text"><![CDATA[原文链接：https://guides.cocoapods.org/using/pod-install-vs-update.html 译者：Soledad、DamonLu 微博：@CaiYue_ 介绍很多人刚接触 CocoaPods 时都会觉得 pod install 只在第一次给项目配置 CocoaPods 的时候使用，pod update 只在之后使用。然而 压根就不是那样的。（译者注：原文中还提到这里的install和update的含义和字典中的意思不完全相同，要具体问题具体分析，根据相关文档来判断。） 这篇文章的目的就是向你解释什么时候该用 pod install 和 pod update 。 TL;DR: 在你的项目里安装新pods时使用 pod install。即使你已经有 Podfile 和曾经运行过 pod install指令，所以即使你在已经使用CoacoPods的项目中刚刚增添／移除 pods，你也应当使用该命令。 只在你想让pods升级到新版本时才使用 pod update。 具体使用场景pod install当你第一次你想获取pods项目时，以及当你每次编辑你的 Podfile 来增加、更新或者移除某个pod的时候。 每当你运行 pod install 指令时——下载和安装pods时——CocoaPods都会把每个安装的pods的版本，写在 Podfile.lock 文件里。这个文件跟踪纪录了安装了的pods的版本信息并锁住版本。 当你运行 pod install 时，它只安装没有列在 Podfile.lock 里的pods。 对于已经列在 Podfile.lock 中的pods，它会下载 Podfile.lock 中列的确切的版本，而不会去检查这些pods是否有新的可用版本。 对于那些还没有列在 Podfile.lock 中的pods，它会寻找满足 Podfile 中约束条件的pods（例如 pod ‘MyPod’,’~&gt;1.2’） pod outdated当你运行 pod outdated ，CocoaPods 会列出所有 Podfile.lock 文件中已经过时的pods。也就是说，如果你运行 pod update PODNAME （PODNAME为列出的pods名称），它们将会被更新（只要它们满足 Podfile 中满足的约束条件。） pod update当你运行 pod update PODNAME，CoacoPods将会试着去找名为 PODNAME 的pod的更新版本，而不考虑 Podfile.lock 文件中的内容。它会将该pod更新至最新版本（同时只要它满足Podfile中的约束），并且也会相应的更新 Podfile.lock 中的内容。 如果你运行 pod update ，不加任何参数，CocoaPods将会把所有在 Podfile 中列举的pods更新到最新版本。 推荐用法使用 pod update PODNAME，你将只能够更新一个特定的pod（检查是否有新版本并且更新）。而不是像 pod install 那样不去尝试更新已安装的pods。 当你把pod加入到 Podfile 后，你应当运行 pod install 而不是 pod update。 也就是说，只有当你想去升级特定pod（或是全部pods）的时候才用 pod update [PODNAME]。 把你的 Podfile.lock 加入到版本控制中 作为提醒，即使我们不需要把Pods项目上传到版本管理的仓库中，我们也应当始终commit &amp; push 我们的 Podfile.lock 文件。 否则，它会打破上面解释的关于pod install能够锁定已安装版本的pod 的整个逻辑 译者注原文末尾还举了一个实际中应用 pod install 和 pod update 的例子，并提了一个不要在Podfile中写死特定版本的建议。链接戳此https://guides.cocoapods.org/using/pod-install-vs-update.html。 场景示例以下是一个场景示例，用于说明在项目生命周期中可能遇到的各种用例。 阶段1：User1 创建项目 USER1创建一个项目，想用pods A，B，C。他们用这些pods 创建了一个Podfile文件，然后运行pod install。 这将会安装pods A，B，C，他们都在版本1.0.0。 该Podfile.lock会跟踪并标记A，B，C的版本为1.0.0。 顺便说一下，因为这是第一次运行pod install，并且Pods.xcodeproj项目尚不存在，该命令还会创建Pods.xcodeproj和 .xcworkspace，但这只是该命令的额外产生的，不是主要功能。 阶段2：User1 添加一个新的pod稍后，user1想要将pod D添加到Podfile。 因此，他们应该在之后运行pod install，即使pod B的主要人员在第一次执行pod intall后发布了pod的1.1.0版本，该项目仍会继续使用1.0.0版本 - 因为user1只想要添加pod D，不想更新pod B。 这就是有些人错误的地方，因为他们在这使用 pod update - 可能会认为“我想用新的pod 来更新项目”？- 而不是使用pod install- 在项目中安装新的pod。 阶段3：User2 加入该项目然后，从未参与过该项目的用户2加入该团队。他们克隆仓库然后使用pod install。 Podfile.lock（应该提交到git仓库）的内容将确保他们将获得完全相同的pods，并且使用与user1完全相同的版本。 即使1.2.0版本的C现在可用，user2也将获得1.0.0版本的C. 因为这是在Podfile.lock中注册的内容。 pod C被Podfile.lock锁定为版本1.0.0（该文件因此得名）。 阶段4：检查pod的新版本稍后，user1需要检查pods是否有可用的更新。他们运行pod outdated这将告诉他们，pod B有一个新1.1.0版本，并且pod C有一个新1.2.0版本。 user1决定他们想更新pod B，而不是pod C; 所以他们运行pod update B，它将B从版本1.0.0更新到版本1.1.0（并相应地更新Podfile.lock），但会保持C版本1.0.0（不会更新到1.2.0）。 在Podfile中使用精确的版本是不够的有些人可能会认为，通过在Podfile中指定Pod的精确版本，例如pod ‘A’，’1.0.0’，足以保证每个用户都拥有与团队中其他人相同的版本。 然后，他们甚至可以使用pod update，即使只是添加一个新Pod，也认为从来不会有风险更新其他Pod，因为他们在Podfile中固定了pod版本。 但事实上，这还不足以保证我们上述场景中的user1和user2将始终获得完全相同版本的所有Pod。 一个典型的例子是，如果pod A依赖于pod A2 - 在A.podspec中声明为依赖关系’A2’，’〜&gt; 3.0’。在这种情况下，在Podfile中使用pod’A’，’1.0.0’，确实会强制user1和user2都使用pod A的版本1.0.0，但是： 而当user2稍后加入项目时运行pod install时，他们可能会在版本3.5中获得pod A2（因为A2的维护者可能同时发布了新版本）。这就是为什么确保每个团队成员使用每台计算机上所有pod的相同版本的唯一方法是使用Podfile.lock并正确使用pod安装与pod更新。 user1最终可能会在版本3.4中得到A2（因为那时是A2的最新版本） 而当user2加入项目后，运行pod install时，他们可能会在版本3.5中获得pod A2（因为A2的维护者可能同时发布了新版本）。 这就是为什么确保每个团队成员使用每台计算机上所有pod的相同版本的唯一方法是使用Podfile.lock并正确使用pod install与pod update。]]></content>
      <categories>
        <category>cocoaPods</category>
      </categories>
      <tags>
        <tag>cocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
